// N√≠vel 1

// Etapa 1: Cria√ß√£o Vari√°veis Principais.
let nome = "CriptoBella";
let classe = "Ciber Guerreira";   
let nivel = 10;     
let vida = 100; 
let ouro = 50;      
let xp = 50;


console.log(`üéØA batalha de ${nome} - n√≠vel 1\n`)
console.log(`${nome} √© uma ${classe}, que protege o Castelo de Firewallia, um local muito protegido contra ataques dos ex√©rcitos de Malwere`);
console.log(`Em um dia comum, o ex√©rcito inimigo decide atacar o reino, para roubar o seu ouro mais precioso: üí∞üìë dados pessoais`);
console.log(`Com nivel ${nivel}, ${vida} de vida, ${ouro} moedas e ${xp} de xp, ${nome} √© convocada para proteger esse bem t√£o valioso`);

// Etapa 2: Defini√ß√£o de Constantes M√°gicas.
const NOME_ARMA = "Firesword wall";       
let DANO_BASE = 50;
const NOME_ARMADURA = "Malware shield";   
let DEFESA_BASE = 20;

console.log(`A primeira batalha se inicia e ${nome} utiliza sua arma ‚öîüó°${NOME_ARMA} para atacar o arqui-inimigo, causando ${DANO_BASE} de dano`);
console.log(`Ele tenta ataca-l√° com armas de fogo para esquentar seu processamento, mas ela utiliza seu escudo ${NOME_ARMADURA} para se defender e se resfriar, com ${DEFESA_BASE} de defesa`);

// Etapa 3: Aplica√ß√£o de Operadores de Atribui√ß√£o.
vida -= 40; //A personagem foi atacada e perdeu 40 pontos de vida
console.log(`Por√©m, mesmo com o escudo, o ataque inimigo tirou pontos de sua vida, diminuindo-a para ${vida}`);

xp += 150;  //A personagem treinou e ganhou 150 pontos de esperi√™ncia;
ouro -= 30; //Gastou 30 moedas de ouro;
vida += 40; //Recuperou 40 pontos de vida;
DANO_BASE *= 2; //Dano da arma foi dobrado;

console.log(`${nome} percebe que precisa melhorar suas habilidades para conseguir vencer o exercito, ent√£o resolve treinar muito mais`);
console.log(`Ela treina constantemente e ganha pontos de experi√™ncia, ficando com ${xp} de xp`);
console.log(`Ela tamb√©m gasta moedas para dobrar o seu dano da arma, voltando para a guerra com ${ouro} de ouro e ${DANO_BASE} de dano em sua arma`);

// Etapa 4: C√°lculo de Atributos Finais.
let ataqueTotal = nivel + DANO_BASE;
let defesaTotal = DEFESA_BASE + (nivel / 2);

console.log(`Quando ${nome} volta ao castelo, pecebe que ele esta quase em ru√≠nas, e precisa passar pelos labirintos de c√≥digo obscuro`);
console.log(`Seu ataque total esta em ${ataqueTotal}, e sua defesa est√° em ${defesaTotal}`);
console.log(`Mas ser√° que ela tem for√ßas para continuar?`);

// Etapa5: Avalia√ß√£o de Prontid√£o com Operadores L√≥gicos.
let vidaSuficiente = vida > 70;
let ataqueForte = ataqueTotal > 60;
let nivelAvancado = nivel >= 10;
let podeEnfrentarGuardiao = vidaSuficiente && (ataqueForte || nivelAvancado);

console.log(`Vida suficiente? ${vidaSuficiente}, Ataque forte? ${ataqueForte}, N√≠vel Avan√ßado? ${nivelAvancado}`);
console.log(`Ap√≥s tantos treinamentos, ela pode enfrentar o ex√©rcito Malware? ${podeEnfrentarGuardiao}`);
console.log(`Sim, tudo valeu a pena, e agora a batalha final se aproxima!!`);


// N√≠vel 2 - continua√ß√£o da jornada do n√≠vel 1

// Estado atual da hist√≥ria
let localAtual = "Labirinto de c√≥dgo obscuro";
let missaoAtual = "atravessa-lo e derrotar o ex√©rcito de Malwere";

// Recapitulando
console.log(`\nüéØA batalha de ${nome} - n√≠vel 2\n`);
console.log(`Como visto anteriormente, a ${classe} ${nome} est√° em frente a um ${localAtual}, com a miss√£o de ${missaoAtual}.`);

//Novos atribitos para a batalha
let mana1 = ("camuflagem de dados");  //Faz com que a personagem se camufle
let mana2 = ("Ai Processing"); //Usa a inteligencia artificial para prever movimentos inimigos, calcular rotas, etc
let energiaMana1 = 80;  //m√°x de 100 - mana 1
let energiaMana2 = 80; //max de 100 - mana 2

let forca = 45;     //m√°ximo √© 100;
let defesa = 60;    //m√°ximo √© 100;
let agilidade = 40; //m√°ximo √© 100;
let combatesVencidos = 1;

console.log(`Agora, com novos poderes de ${mana1} = ${energiaMana1} e ${mana2} = ${energiaMana2}, ela segue com ${forca} de for√ßa, ${defesa} de defesa e ${agilidade} de agiliade. E ai vem uma grande jornada pela frente...üèπ`);

//Cap√≠tulo 1: condi√ß√µes simples na narrativa
console.log(`\nüìú Cap√≠tulo 1: a fada desfar√ßada üßö‚Äç‚ôÄÔ∏è`);
console.log(`Antes de atravessar o ${localAtual}:`);

//Veifica√ß√£o baseada no ouro 
if (ouro > 5) {
    console.log("Uma fada aparece e oferece a ela uma üçäfruta deliciosa, em troca de algumas de suas moedas, dizendo que a fruta aumentar√° sua vida, ajudando na batalha");
    console.log(`Por√©m ${nome} recusa a oferta, desconfiando ser uma fruta Trojan, que a infectaria e ü©∏diminuiria sua vida`);
}

//Verifica√ß√£o baseada na forca
if (forca < 50) {
    console.log("A forca f√≠sica ainda √© limitada, ela preisa treinar mais se quiser continuar");
}

//Verifica√ß√£o baseada na agilidade
if (agilidade < 50) {
    console.log(`A ${classe} percebe que seus poderes est√£o limitados, ent√£o decide treinar para aument√°-los`);
    forca += 40;
    agilidade += 30;
    console.log(`Ent√£o seus poderes aumentam para for√ßa = ${forca} e agilidade = ${agilidade}`);
}

console.log("‚úî Agora ela est√° pronta para seguir sua jornada...");

//Capitulo 2: Escolha estrat√©gica
console.log(`\nüìú Cap√≠tulo 2: Atravesando o Labirinto üß†`);
console.log(`${nome} precisa atravessar o ${localAtual}, composto por milhares de armadilhas l√≥gica e confusas, que est√° em sua frente, ent√£o precisa analisar seus atributos para decidir como far√° isso`);

//Sistema baseado em energia de poderes especiais e vida
if (energiaMana2 > 40) {
    console.log(`A ${classe} tem poder de ${mana2} suficiente para calcular rotas`);
    console.log(`Ela utiliza seu poder para reconhecer os padr√µes e calcular as rotas que a ajudar√£o escapar do ${localAtual} com seguran√ßa`);
    energiaMana2 -= 40;
} else {
    console.log(`A ${classe} n√£o tem poder de ${mana2} suficiente para calcular rotas`);
    vida -= 40;
    console.log(`Ela utiliza sua pr√≥rpia energia para reconhecer os padr√µes e calcular as rotas que a ajudar√£o escapar do ${localAtual}, gastando 40 de sua vida, ficando agora com ${vida}`);
}

console.log("Agora que ela conseguiu atravesar o labirinto, precisa destru√≠-lo, para que ningu√©m corra o perigo de se perder nele");

//Sistema baseado em energia de poderes especiais e atributos
if (energiaMana1 > 40) {
    console.log(`A hero√≠na tem energia em seus poderes de ${mana1}, e decide us√°-los`);
    console.log(`Ela se camufla e vai at√© o ponto de controle do ${localAtual}, sem ser vista pelo guardi√£o, onde deleta todo o c√≥digo üí£`);
    console.log(`O local come√ßa a sumir, parte por parte.... Agora ningu√©m corre o risco de se perder üéâ!!`);
    nivel *= 2;
    energiaMana1 -=40;
    xp += 30;
    console.log(`üèÜRecompensa: N√≠vel dobrado e experi√™ncia aumentada. N√≠vel: ${nivel} / Experi√™ncia: ${xp}`);
} else {
    console.log(`Infelizmente a hero√≠na n√£o tem energia suficiente em seus poderes de ${mana1}, ent√£o n√£o poer√° e camuflar`);
    console.log(`Ela precisar√° usar sua for√ßa, agilidade e defesa para derrotar o guari√£o e deletar o c√≥digo`);
    forca -= 20;
    agilidade -= 5;
    defesa -= 10;
    console.log(`O local foi destru√≠do, por√©m ela perdeu pontos de seus atributos üìâ`);
}

console.log(`Agora que esse local perigoso foi destruido, ela pode partir para a parte final... derrotar o l√≠der do ex√©rcito de Malware`);

//Cap√≠tulo 3: A Batalha Decisiva
console.log(`\nüìú Cap√≠tulo 3: A Batalha Final!!üí•`);
let nomeInimigo = "Robot Malware";
poderInimigo = 70;

console.log(`Agora, ${nome} est√° em frente a seu grande inimigo, ${nomeInimigo}, e precisa derrot√°-lo, tirando todo o poder que est√° em ${poderInimigo} ü§ñü§ñ`);

//Sistema que define qual ser√° o comabte final da personagem, basedado na situa√ß√£o
if (DANO_BASE >= 50 && forca >= 80) {
    console.log(`Com toda sua for√ßa e sua arma ${NOME_ARMA}, ela ataca o inimigo!!`);
    console.log(`A arma corta todos os arquivos malicioso internos do inimigo! üëæ`);
    forca /= 2;
    poderInimigo -= (DANO_BASE);
} else if (xp >= 200) {
    console.log(`Sua experi√™ncia a ajuda a lembrar de todas as lutas anteriores e ataques j√° planejados`);
    console.log(`Ela repete o que aprendeu em batalhas anteriores`);
    poderInimigo -= (forca - 15);
} else if (defesa >= 70 && agilidade >=40) {
    console.log(`Com toda sua agilidade e defesa, ela faz um ataque r√°pido`);
    console.log(`O inimigo perde poder com o ataque`);
    poderInimigo -= agilidade / 2;
} else {
    console.log(`Juntando seus poucos atributos restantes, ela executa um ataque final`);
    poderInimigo -= 40;
}

//Ep√≠logo: resultado final

if (poderInimigo <= 0) {
    console.log(`\nBatalha conclu√≠da!!!‚ú®‚ú® O ${nomeInimigo} foi derrotado!`);
    console.log(`${nome} recupera o üí∞ouro preciso: dados pessoais, e fica reconhecida por todo reino!!`);
    xp += 100;
    nivel += 10;
    combatesVencidos++;
    ouro +=90;
} else {
    console.log(`\n${nome} consegue capturar o üí∞ouro precioso: dados pessoais, por√©m n√£o derrota o inimigo!üòï`);
    console.log(`Foi uma batalha dif√≠cil, e ela sobrevive, mas ter√° que retornar para derrotar o ${nomeInimigo}`);
}

console.log(`\nüìñFIM DO CAP√çTULO - Aguarde o pr√≥ximo n√≠vel`);


// N√≠vel 3 - continua√ß√£o da jornada

console.log(`\n\nüéØA batalha de ${nome} - n√≠vel 3\n`);

localAtual = "Castelo dos Arrays"
console.log(`Ap√≥s a batalha √©pica contra o ${nomeInimigo}, a ${classe} ${nome} recebe uma nova miss√£o: explorar o üè∞${localAtual}üè∞`);
console.log(`Agora ela segue com - nivel: ${nivel}, vida: ${vida}, xp: ${xp}, ouro: ${ouro}`);

//Novos elementos para a jornada
let inventario = ["Firesword wall", "Malware shield"]; //Ao decorrer da hist√≥ria novos ser√£o adicionados
let inimigosEncontrados = ["Ex√©rcito Malware", "Robot Malware", "Guardi√£o"]; //Inimigos que j√° foram encontrados, com o tempo mais ser√£o adicionados
let espacosCastelo = ["Escada descriptografada", "Sala Adware", "Biblioteca Viral"];
let tesouros = []; //Adicionados no decorrer da jornada

console.log(`Antes de entrar ela confere seu invert√°rio, para analisar o que tem guardado:üíº ${inventario} - ${inventario.length} itens`);


//Cap√≠tulo 1: Descoberta de novos itens
console.log(`\nüìú Cap√≠tulo 1: Explorando e encontando itens`);

//Declara√ß√£o e Inicializa√ß√£o
console.log(`Conforme ela entrava no castelo, encontrou po√ß√µes, que seriam √∫teis para sua jornada.`);
let po√ßoesEncontradas = ["Po√ß√£o do resfriamento", "po√ß√£o IA", "po√ß√£o de camuflagem"];

//Acesso de elementos e utilizando m√©todos array para aicionar itens
console.log(`Primeira po√ß√£o encontrada: üß™ ${po√ßoesEncontradas[0]}`);
inventario.push(po√ßoesEncontradas[0]);
console.log(`E ap√≥s essa encontrou mais algumas, ficando com ${po√ßoesEncontradas.length} üß™`);
inventario.push(po√ßoesEncontradas[1]);
inventario.push(po√ßoesEncontradas[2]);

console.log("Os novos itens foram adicionados no ivent√°rio. Ivent√°rio atual:");
console.table(inventario);

//Utilizando m√©todos array para modificar itens
inventario[0] = "Firesword wall √©pica";  // Upgrade da espada
console.log("Ela tamb√©m gasou algumas moedas para fazer um upgrade em sua espada, chamada agora de " + inventario[0]);
